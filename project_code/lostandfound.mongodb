const c = require('crypto');
/**
  @module miniCrypt
  @desc A tiny crypto lib for the 326 kids.
*/

class MiniCrypt {
  /**
    @constructor
    @arg {number} its - The number of iterations to be performed; higher iterations means more security but slower speed.
    @arg {number} keyL - The length of the result in bytes.
    @arg {number} saltL - The amount of salt in bytes.
    @arg {string} saltL - The digest (i.e. hash) algorithm to use.
    @desc Creates a new `MiniCrypt` instance.
   */
  constructor(its = 1e5, keyL = 64, saltL = 16, digest = 'sha256') {
    this.its = its;
    this.keyL = keyL;
    this.saltL = saltL;
    this.digest = digest;
  }

  /**
    @public
    @memberof MiniCrypt
    @arg {string} pw - The plain-text user password to be hashed.
    @returns {[string, string]} - An array containing (1) the salt used to hash the specified password, and (2) the hash itself.
    @desc Hash a user password.
   */
    hash(pw) {
	const salt = c.randomBytes(this.saltL).toString('hex'), // get our new salt for this pw
        hash = c.pbkdf2Sync(pw, salt, this.its, this.keyL, this.digest).toString('hex'); // hash the pw
	return [salt, hash]; // return the pair for safe storage
  };

  /**
    @public
    @memberof MiniCrypt
    @arg {string} pw - The plain-text user password to be checked.
    @arg {string} salt - The salt associated with the user.
    @arg {string} hash - The hash associated with the user.
    @returns {Boolean} - A result of `true` iff `pw` & `salt` hash to `hash`.
    @desc Validate a user password.
   */
    check(pw, salt, hash) {
    return c.timingSafeEqual(c.pbkdf2Sync(pw, salt, this.its, this.keyL, this.digest), Buffer.from(hash, 'hex'));
  };
}
const mc = new MiniCrypt();

// Select the database to use.
use('LostAndFound');

db.User.drop();
const [salt, hash] = mc.hash('12345');

db.User.insertMany([
  { 'username': 'Kelly', 'salt': salt, 'hash': hash, 'email': 'kechung@umass.edu'},
  { 'username': 'Yuqi', 'salt': salt, 'hash': hash, 'email': 'yuqliu@umass.edu'},
  { 'username': 'Yujin', 'salt': salt, 'hash': hash,  'email': 'yujinqin@umass.edu'},
]);
db.User.find().pretty();

db.Items.drop();
db.Items.insertMany([
			{
				"username": 'Kelly',
				"item_id": '1',
				"item_name": 'apple',
				"item_desc": 'apple air pods',
				"image": '',
				"address": '123 main street',
				"is_found": 'y',
				"lost_date": '2022-08-07',
				"time_lost": '12:12pm',
				"found_date": '',
				"category": 'Electronic',
				"color": 'white',
				"brand": 'Apple',
				"additional": 'Lost it on the way to the bus stop'
			},
			{
				"username": 'Yuqi',
				"item_id":  '2',
				"item_name": 'apple',
				"item_desc": 'iphone',
				"image": '',
				"address": '123 town street',
				"is_found": 'n',
				"lost_date": '2022-11-17',
				"time_lost": '9:37pm',
				"found_date": '',
				"category": 'Electronic',
				"color": 'Grey',
				"brand": 'Apple',
				"additional": 'Lost it on my way to the park'
			}
]);

db.Items.find().pretty();
